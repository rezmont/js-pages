{"version":3,"sources":["components/card.jsx","components/card-list.jsx","components/search-box.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","item","console","log","className","alt","src","id","class","key","title","CardList","items","map","el","SearchBox","placeholder","handleChange","type","onChange","App","ev","setState","search","target","value","state","loading","albums","fetch","then","resp","json","els","this","color","filter","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iUAIO,SAASA,EAAT,GAAyB,IAATC,EAAQ,EAARA,KAErB,OADAC,QAAQC,IAAIF,GAEV,yBAAKG,UAAU,QACf,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BL,EAAKM,MACnD,yBAAKC,MAAM,2BACT,uBAAGC,IAAKR,EAAKM,IAAKN,EAAKS,SCNxB,SAASC,EAAT,GAA8B,IAAVC,EAAS,EAATA,MACzB,OACE,yBAAKR,UAAU,aACZQ,EAAMC,KAAI,SAACC,GAAD,OACT,kBAACd,EAAD,CAAMC,KAAMa,Q,MCLb,SAASC,EAAT,GAAmD,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aACvC,OACE,2BACEb,UAAU,aACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,I,ICiDDG,E,kDAnDb,aAAe,IAAD,8BACZ,gBAoBFH,aAAe,SAACI,GAAD,OAAQ,EAAKC,SAAS,CAAEC,OAAQF,EAAGG,OAAOC,SAnBvD,EAAKC,MAAQ,CACXC,SAAS,EACTJ,OAAQ,GACRK,OAAQ,IALE,E,gEASO,IAAD,OAClBC,MAAM,+CACHC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GAAD,OACJ,EAAKX,SAAS,CACZK,SAAS,EACTC,OAAQK,S,+BAad,GAAIC,KAAKR,MAAMC,QACb,OACE,yBAAKvB,UAAU,cACb,kBAAC,IAAD,CAAcc,KAAK,QAAQiB,MAAM,aAJhC,MASoBD,KAAKR,MAAxBE,EATD,EASCA,OAAQL,EATT,EASSA,OACVX,EAAQgB,EAAOQ,QAAO,SAACtB,GAAD,OAAQA,EAAGJ,MAAM2B,SAASd,MACtD,OACE,yBAAKnB,UAAU,OACb,yCACA,kBAACW,EAAD,CACEC,YAAY,SACZC,aAAciB,KAAKjB,eAErB,kBAACN,EAAD,CAAUC,MAAOA,S,GA9CP0B,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.87539f99.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./card.styles.css\";\r\n\r\nexport function Card({ item }) {\r\n  console.log(item);\r\n  return (\r\n    <div className=\"card\">\r\n    <img alt=\"mosnter\" src={`https://robohash.org/${item.id}`} />\r\n      <div class=\"card_title title-shadow\">\r\n        <p key={item.id}>{item.title}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Card } from \"./card\";\r\nimport \"./card.styles.css\";\r\n\r\nexport function CardList({ items }) {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {items.map((el) => (\r\n        <Card item={el} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./search-box.styles.css\";\r\n\r\nexport function SearchBox({ placeholder, handleChange }) {\r\n  return (\r\n    <input\r\n      className=\"search-box\"\r\n      type=\"search\"\r\n      placeholder={placeholder}\r\n      onChange={handleChange}\r\n    />\r\n  );\r\n}\r\n","import ReactLoading from \"react-loading\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/card-list\";\nimport { SearchBox } from \"./components/search-box\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: true,\n      search: \"\",\n      albums: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/albums\")\n      .then((resp) => resp.json())\n      .then((els) =>\n        this.setState({\n          loading: false,\n          albums: els,\n        })\n      );\n  }\n\n  // Note: the below anonymous funtion works since \"this\" this automatically bound for arrow functions with lexical scoping.\n  handleChange = (ev) => this.setState({ search: ev.target.value });\n  // Note: the below does not work since \"this\" is not bound. \n  // handleChange(ev) {\n  //   this.setState({ search: ev.target.value });\n  // }\n\n  render() {\n    if (this.state.loading) {\n      return (\n        <div className=\"App-header\">\n          <ReactLoading type=\"cylon\" color=\"#888888\" />\n        </div>\n      );\n    }\n\n    const { albums, search } = this.state;\n    const items = albums.filter((el) => el.title.includes(search));\n    return (\n      <div className=\"App\">\n        <h1>Really!!!</h1>\n        <SearchBox\n          placeholder=\"search\"\n          handleChange={this.handleChange}\n        />\n        <CardList items={items} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}